// Code generated by protoc-gen-go-http. DO NOT EDIT.

package helloworld

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type HelloworldHTTPServer interface {
	CreateHelloworld(context.Context, *CreateHelloworldRequest) (*CreateHelloworldReply, error)

	DeleteHelloworld(context.Context, *DeleteHelloworldRequest) (*DeleteHelloworldReply, error)

	GetHelloworld(context.Context, *GetHelloworldRequest) (*GetHelloworldReply, error)

	ListHelloworld(context.Context, *ListHelloworldRequest) (*ListHelloworldReply, error)

	UpdateHelloworld(context.Context, *UpdateHelloworldRequest) (*UpdateHelloworldReply, error)
}

func RegisterHelloworldHTTPServer(s http1.ServiceRegistrar, srv HelloworldHTTPServer) {
	s.RegisterService(&_HTTP_Helloworld_serviceDesc, srv)
}

func _HTTP_Helloworld_CreateHelloworld_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in CreateHelloworldRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(HelloworldServer).CreateHelloworld(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Helloworld_UpdateHelloworld_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in UpdateHelloworldRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(HelloworldServer).UpdateHelloworld(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Helloworld_DeleteHelloworld_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in DeleteHelloworldRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(HelloworldServer).DeleteHelloworld(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Helloworld_GetHelloworld_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in GetHelloworldRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(HelloworldServer).GetHelloworld(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Helloworld_ListHelloworld_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in ListHelloworldRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(HelloworldServer).ListHelloworld(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_Helloworld_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.helloworld.Helloworld",
	Methods: []http1.MethodDesc{

		{
			Path:    "/api.helloworld.Helloworld/CreateHelloworld",
			Method:  "POST",
			Handler: _HTTP_Helloworld_CreateHelloworld_0,
		},

		{
			Path:    "/api.helloworld.Helloworld/UpdateHelloworld",
			Method:  "POST",
			Handler: _HTTP_Helloworld_UpdateHelloworld_0,
		},

		{
			Path:    "/api.helloworld.Helloworld/DeleteHelloworld",
			Method:  "POST",
			Handler: _HTTP_Helloworld_DeleteHelloworld_0,
		},

		{
			Path:    "/api.helloworld.Helloworld/GetHelloworld",
			Method:  "POST",
			Handler: _HTTP_Helloworld_GetHelloworld_0,
		},

		{
			Path:    "/api.helloworld.Helloworld/ListHelloworld",
			Method:  "POST",
			Handler: _HTTP_Helloworld_ListHelloworld_0,
		},
	},
	Metadata: "api/helloworld/helloworld.proto",
}
