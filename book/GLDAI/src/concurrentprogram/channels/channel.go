// Channel 的收发操作均遵循与先入先出 FIFO 原则：
// 先从 Channel 读取数据的 Goroutine 会先接收到消息
// 先从 Channel 发送数据的 Goroutine 会得到先发送数据的权力
// 发送方会向缓冲区中写入数据，然后唤醒接收方，多个接收方会尝试从缓冲区中读取数据，如果没有读取到就会重新陷入休眠；
// 接收方会从缓冲区中读取数据，然后唤醒发送方，发送方会尝试向缓冲区写入数据，如果缓冲区已满就会重新陷入休眠；

// 接受数据：
// Channel 为空，挂起当前 Goroutine
// Channel 关闭，缓冲区没有任何数据
// Channel 已经关闭或是一个空指针，则会报 panic 错误，并执行 Channel 的关闭逻辑，清楚里面的所有元素