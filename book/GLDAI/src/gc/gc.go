/*
程序的数据和变量都会被分配到所在程序的虚拟内存中，内存区域主要分为两种：栈区（Stack）和堆区（Heap）。
调用的参数、返回值、指针以及局部变量都会被分配到栈上，这部分由编译器管理
内存管理一般由三个部分组成：应用程序（申请内存）、内存配分器（分配内存）、收集器

Go 的内存分配器采用线性分配器
在内存中维护一个指向内存地址的指针，当程序申请内存时，分配器只需要检查剩余的内存空间满足并返回分配的内存区域并修改对应的指针位置，然后偏移到对应的位置继续等待下一个 app 的内存申请请求
分配器主要分为两个，线性分配器和空闲链表分配器

线性分配器性能高，但是无法利用已经被释放过的内存，所以在发生垃圾回收时要注重要看这部分，是采用标记压缩算法还是分代回收算法又或是复制回收算法。
空闲链表分配器：顾名思义，数据结构是链表，所以会节省内存以及重用已释放的内存。这里面内存的方案又有四种：
1. 首次适应：从链表头部开始遍历，找到第一个内存大小满足的即分配
2. 循环首次适应：从上一次循环遍历分配的位置开始遍历，找到第一个内存大小满足即分配
3. 最优适应：从链表头遍历，找到内存大小最合适分配
4. 隔离适应：将链表分割为固定大小不同的多个链表，每个链表内存大小一致，申请内存时先找到满足条件的链表，在从链表中分配

Go在线性分配器的分配策略思想跟第四点类似

Go借鉴了线程缓存分配（Thread-Caching Malloc,TCMalloc）的设计思路实现的高速内存分配，核心理念是：使用多级缓存将对象根据内存大小分类，并按照类别实施不同的分配策略。
0-16b: 微对象
16b-32KB: 小对象
32KB-+∞: 大对象

分级缓存
内存分配会将不同类别的对象用不同的组件管理：
微对象：线程缓存（Thread Cache）
小对象：中心缓存（Central Cache）
大对象：页堆（Page Heap）

页堆是内存分配的主要数据结构（mheap），是一个全局的。该结构包含两个重要的部分：全局中心缓存列 central 字段和管理堆区内存区域的 arenas 字段
*/